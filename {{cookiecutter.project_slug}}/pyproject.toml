[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "{{ cookiecutter.version }}"
description = "{{cookiecutter.project_desc}}"
authors = ["{{cookiecutter.author}}, {{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
readme = "README.rst"
packages = [{include = "{{cookiecutter.project_slug}}"}]
license = "MIT"

repository = "{{cookiecutter.git_remote}}"
classifiers = [
    # Trove classifiers
    # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: {{cookiecutter.python_version}}",
]


[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
poetry = "^{{cookiecutter.poetry_version}}"
pre-commit = "*"
isort = "*"
black = "*"
flake8 = "*"

[tool.poetry.group.tests]
optional = true

[tool.poetry.group.tests.dependencies]
pyyaml = "*"
pytest = "*"
coverage = "*"
python-dotenv = "*"
pytest-cov = "*"

[tool.poetry.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.__main__:main"

[build-system]
requires = ["setuptools","poetry"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79

[tool.isort]
multi_line_output = 3
include_trailing_comma = true

[tool.pytest.ini_options]
testpaths = ["tests",]
pythonpath = ["."]
